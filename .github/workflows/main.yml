name: "Vprofile CI/CD"
on: workflow_dispatch

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: vproapp
  EKS_CLUSTER: vprofile-eks

jobs:
    Build_AND_test:
      runs-on: ubuntu-latest
      steps:
        - name: checkout
          uses: actions/checkout@v4.2.2
        
        - name: maven test
          run: mvn test

        - name: checkstyle 
          run: mvn checkstyle:checkstyle

        - name: Install Java 11
          uses: actions/setup-java@v3
          with:
           distribution: 'temurin'   # or 'zulu', 'adopt', etc.
           java-version: '11'
        
        # Setup sonar-scanner
        - name: Setup SonarQube
          uses: warchant/setup-sonar-scanner@v7

        # Run sonar-scanner
        - name: SonarQube Scan
          run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/ 
           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/  

    BUILD_AND_PUBLISH:   
     needs: Build_AND_test
     runs-on: ubuntu-latest
     steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
         access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         registry: ${{ secrets.REGISTRY }}
         repo: ${{ env.ECR_REPOSITORY }}
         region: ${{ env.AWS_REGION }}
         tags: latest,${{ github.run_number }}
         daemon_off: false
         dockerfile: ./Dockerfile
         context: ./
      
      - name: Set Slack colour
        id: slack_colour
        if: always()     
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "color=good" >>"$GITHUB_OUTPUT"
          else
            echo "color=danger" >>"$GITHUB_OUTPUT"
          fi
  
      - name: Slack notification
        if: always()
        uses: slackapi/slack-github-action@v2
        with:
           webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
           webhook-type: incoming-webhook
           payload: |
            attachments:
             - color: "${{ steps.slack_colour.outputs.color }}"
               fallback: "${{ job.status }} – ${{ github.workflow }} run #${{ github.run_number }}"
               text: |
                 *${{ job.status }}* – *${{ github.workflow }}* run #${{ github.run_number }}
                 <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|More info>

    DeployToEKS:
     needs: BUILD_AND_PUBLISH
     runs-on: ubuntu-latest
     steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Print config file
        run: cat ~/.kube/config

      - name: Login to ECR
        run: |
          kubectl delete secret regcred --ignore-not-found
          kubectl create secret docker-registry regcred \
          --docker-server=${{ secrets.REGISTRY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password)

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack
    
    Notification:
     needs: [Build_AND_test, BUILD_AND_PUBLISH, DeployToEKS]
     if: ${{ always() }}
     runs-on: ubuntu-latest
     steps:
       - name: Set Slack colour
         id: slack_colour
         if: always()     
         run:  |
          if [ "${{ needs.DeployToEKS.result }}" = "success" ]; then
            echo "color=good"   >> "$GITHUB_OUTPUT"
            echo "icon=:white_check_mark:" >> "$GITHUB_OUTPUT"
          else
            echo "color=danger" >> "$GITHUB_OUTPUT"
            echo "icon=:x:" >> "$GITHUB_OUTPUT"
          fi
  
       - name: Slack notification
         if: always()
         uses: slackapi/slack-github-action@v2
         with:
           webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
           webhook-type: incoming-webhook
           payload:                      |
            attachments:
              - color: "${{ steps.colour.outputs.color }}"
                text: |
                  ${{ steps.colour.outputs.icon }} *Workflow*: **${{ github.workflow }}**
                  *Build:*   ${{ needs.Build_AND_test.result }}
                  *Test:*    ${{ needs.BUILD_AND_PUBLISH.result }}
                  *Deploy:*  ${{ needs.DeployToEKS.result }}
                  <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|More info #${{ github.run_number }}>